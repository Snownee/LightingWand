plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.minecraft_version + "-fabric-" + project.mod_version
group = project.maven_group

repositories {
    maven { url "https://maven.parchmentmc.org" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
	
	// JEI
	maven { url "https://modmaven.dev" }
	maven { url "https://dvs1.progwml6.com/files/maven/" }
    
	// maven {
    //     url "https://cursemaven.com"
    //     content {
    //         includeGroup "curse.maven"
    //     }
    // }
    maven { url = "https://api.modrinth.com/maven" }
	flatDir { dir 'libs' }
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

sourceSets {
    main.resources.srcDirs += "$rootDir/src/generated/resources"
}

loom {
/*
    mixin {
        defaultRefmapName = "${project.mod_id}.refmap.json"
    }
*/
    runs {
        //
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
        //
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"

            runDir "build/datagen"
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
    
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
	
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
	
	// compile against the JEI API but do not include it at runtime
	modCompileOnlyApi "mezz.jei:jei-1.20.1-common-api:${jei_version}"
	modCompileOnlyApi "mezz.jei:jei-1.20.1-fabric-api:${jei_version}"
	// at runtime, use the full JEI jar for Fabric
	//modRuntimeOnly "mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"
	
	// https://modrinth.com/mod/jade/versions
    //modRuntimeOnly "curse.maven:jade-324717:3879361"
    modRuntimeOnly "maven.modrinth:jade:SlsObyHn"
    
	// https://modrinth.com/mod/kiwi/versions
    //modImplementation "curse.maven:kiwi-549404:3878011"
    modImplementation "maven.modrinth:kiwi:a8jR4pPa"
    //modImplementation "libs:Kiwi-1.18.1-fabric:${project.kiwi_version}"
    
    modApi("teamreborn:energy:${project.tr_energy_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

processResources {
    inputs.property "version", project.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": project.mod_version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    // withSourcesJar()
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude '**/*.bat'
    exclude("/assets/${project.mod_id}/lang/en_us.existing.json")
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            //artifact(sourcesJar) {
            //  builtBy remapSourcesJar
            //}
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN") // This is the default. Remember to have the MODRINTH_TOKEN environment variable set or else this will fail, or set it to whatever you want - just make sure it stays private!
    projectId = "lak1V0eP" // This can be the project ID or the slug. Either will work!
    versionNumber = project.mod_version // You don't need to set this manually. Will fail if Modrinth has this version already
    versionType = "release" // This is the default -- can also be `beta` or `alpha`
    uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
    gameVersions = ["1.19.3"] // Must be an array, even with only one version
    loaders = ["fabric"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
    dependencies { // A special DSL for creating dependencies
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
        required.project "fabric-api"
        required.project "kiwi"
        optional.project "cloth-config"
    }
}